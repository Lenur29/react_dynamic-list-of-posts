{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","request","url","a","options","fetch","data","json","addCommentToTheServer","newComment","method","body","JSON","stringify","headers","PostsList","selectedUserId","selectedPostId","selectPost","useState","posts","setPosts","useEffect","userId","then","result","className","length","map","post","title","type","onClick","id","NewCommentForm","onAddTheComment","name","setName","email","setEmail","setNewComment","onSubmit","event","preventDefault","postId","value","placeholder","required","onChange","target","getPostComments","removeComment","commentId","PostDetails","postDetails","setPostDetails","postComments","setPostComments","areCommentsHidden","setAreCommentsHidden","deleteComment","commentsFromServer","current","postComment","App","users","setUsers","setSelectedUserId","setSelectedPostId","response","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.259e0a5b.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const request = async (url: string, options = {}) => {\n  const data = await fetch(`${BASE_URL}${url}`, options);\n\n  return data.json();\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId: number) => {\n  if (userId === 0) {\n    return request('posts');\n  }\n\n  return request(`posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n\nexport const addCommentToTheServer = (newComment: Partial<Comment>) => {\n  return request('comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\n\ntype Props = {\n  selectedUserId: number,\n  selectedPostId: number,\n  selectPost: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({ selectedUserId, selectedPostId, selectPost }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getUserPosts(selectedUserId)\n      .then(result => setPosts(result));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length > 0 && (\n          posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>\n                  User #\n                  {post.userId}\n                  :\n                </b>\n                {' '}\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  selectPost(post.id);\n                }}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onAddTheComment: (newComment: Partial<Comment>) => void,\n  selectedPostId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddTheComment, selectedPostId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [newComment, setNewComment] = useState('');\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const handleNewComment = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setNewComment(event.target.value);\n  };\n\n  const resetInputFields = () => {\n    setName('');\n    setEmail('');\n    setNewComment('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const comment = {\n      name,\n      email,\n      body: newComment,\n      postId: selectedPostId,\n    };\n\n    onAddTheComment(comment);\n    resetInputFields();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          onChange={handleNameChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          onChange={handleEmailChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={newComment}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          onChange={handleNewComment}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return request(`comments?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number) => {\n  return request(`comments/${commentId}`, { method: 'DELETE' });\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails, addCommentToTheServer } from '../../api/posts';\nimport { getPostComments, removeComment } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState<null | Post>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [areCommentsHidden, setAreCommentsHidden] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(result => setPostDetails(result));\n\n    getPostComments(selectedPostId)\n      .then(result => setPostComments(result));\n  }, [selectedPostId]);\n\n  const handleComments = () => {\n    setAreCommentsHidden(current => !current);\n  };\n\n  const deleteComment = async (commentId: number) => {\n    await removeComment(commentId);\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setPostComments(commentsFromServer);\n  };\n\n  const onAddTheComment = async (newComment: Partial<Comment>) => {\n    await addCommentToTheServer(newComment);\n\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setPostComments(commentsFromServer);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      {postComments.length > 0 && (\n        <section\n          className=\"PostDetails__comments\"\n        >\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handleComments}\n          >\n            {`${!areCommentsHidden ? 'Hide' : 'Show'} `\n            + `${postComments.length} comments`}\n          </button>\n\n          <ul className=\"PostDetails__list\">\n            {areCommentsHidden || postComments.map(postComment => (\n              <li\n                key={postComment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => (\n                    deleteComment(postComment.id)\n                  )}\n                >\n                  X\n                </button>\n                <p>{postComment.body}</p>\n              </li>\n            ))}\n          </ul>\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onAddTheComment={onAddTheComment}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(result => setUsers(result));\n  }, []);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const selectPost = (postId: number) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select-user\">\n          Select a user: &nbsp;\n          <select\n            id=\"select-user\"\n            onChange={handleSelect}\n          >\n            <option\n              value={0}\n            >\n              All users\n            </option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            selectPost={selectPost}\n          />\n        </div>\n\n        {selectedPostId > 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","export const getUsers = () => {\n  return fetch('https://mate.academy/students-api/users')\n    .then(response => response.json());\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}